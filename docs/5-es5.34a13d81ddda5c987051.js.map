{"version":3,"sources":["webpack:///src/app/select-crop/select-crop.component.html","webpack:///src/app/select-crop/select-crop-routing.module.ts","webpack:///src/app/select-crop/select-crop.component.ts","webpack:///src/app/select-crop/select-crop.module.ts","webpack:///node_modules/ng2-search-filter/ng2-search-filter.js"],"names":["SelectCropComponent","SelectCropRoutingModule","SelectCropModule","Ng2SearchPipeModule","routes","path","component","appService","router","location","searchText","title","toggleSearch","this","deleteMyCrops","requestCropsList","subscribe","cropListResponse","dataSource","data","getMyCrops","myCrops","back","searchbar","nativeElement","focus","clickedCrop","findIndex","c","index","push","setMyCrops","navigateByUrl","filter","i","cropName","includes","backToMyCrops","openSearch","searchClose","forChild","ɵmod","type","ɵinj","factory","t"],"mappings":"wnBA4BI,wBACE,sBAAU,6EACR,iBACA,0BACE,4BAAmC,QAAmB,OACxD,OACF,OACF,O,0BAL0C,+BAAqB,uBAEtB,0BC5B7C,ICYaA,EDDAC,EEMAC,EC6CPC,EH9DAC,EAAiB,CACrB,CACEC,KAAM,GACNC,WCSSN,EAAN,WAWL,WAAoBO,EAAwCC,EAAwBC,aAAhE,KAAAF,aAAwC,KAAAC,SAAwB,KAAAC,WATpF,KAAAC,WAAa,GACb,KAAAC,MAAQ,cAIR,KAAAC,gB,UAPK,O,EAAA,G,EAAA,kCAaK,WACRC,KAAKN,WAAWO,gBAChBD,KAAKN,WAAWQ,mBAAmBC,UAAUC,YAC3CJ,EAAKK,WAAaD,EAAiBE,OAGrCN,KAAKN,WAAWa,aAAaJ,UAAUC,YACrCJ,EAAKQ,QAAUJ,MApBd,sCAyBHJ,KAAKJ,SAASa,SAzBX,mCA6BHT,KAAKD,gBACLC,KAAKU,UAAUC,cAAcC,UA9B1B,oCAiCHZ,KAAKH,WAAa,GAClBG,KAAKD,kBAlCF,8BAqCGc,IACmE,IAArEb,KAAKQ,QAAQF,KAAKQ,UAAUC,YAAC,OAAIA,EAAEC,QAAUH,EAAYG,UAC3DhB,KAAKQ,QAAQF,KAAKW,KAAKJ,GACvBb,KAAKN,WAAWwB,WAAWlB,KAAKQ,SAChCR,KAAKL,OAAOwB,cAAc,kBAAoBN,EAAYG,UAzCzD,uCA6CW,WACd,OAAwB,OAApBhB,KAAKH,YAA2C,KAApBG,KAAKH,WAC5BG,KAAKK,WAELL,KAAKK,WAAWe,OAAOC,YAAC,OAAIA,EAAEC,SAASC,SAAUvB,EAAKH,mB,2BAjD5D,K,sCAAMV,GAAmB,gC,uBAAnBA,EAAmB,wD,MAAA,K,s6BFhBhC,gBACE,wBACE,4BACE,mBAAuF,+BAAS,EAAAqC,kBAC9F,mBAAU,gBAAK,OACjB,OACA,gBACE,gBAAgE,qBAAU,OAC5E,OACA,mBAAyF,+BAAS,EAAAC,eAChG,oBAAU,kBAAM,OAClB,OACF,OACF,OAEA,yBACE,6BACE,oBACE,oBAAU,kBAAM,OAClB,OACA,mBAA+D,yDAA/D,OACA,qBAAmC,+BAAS,EAAAC,gBAC1C,oBAAU,iBAAK,OACjB,OACF,OACF,OAEA,4BACE,kCAQF,OACF,Q,MApCuE,sCAclB,uCAKgB,qCAQlD,6C,05BCbZ,IAAMtC,EAAN,yB,qBAAMA,I,oDAAAA,IAAuB,SAHzB,CAAC,IAAauC,SAASpC,IACtB,O,mBGqDND,E,yBAEcsC,UAAO,KAAwB,CAAEC,KAAMvC,IAC3DA,EAAoBwC,UAAO,KAAwB,CAAEC,QAAS,SAAqCC,GAAK,OAAO,IAAKA,GAAK1C,M,GDhDlH,IAAMD,EAAN,yB,qBAAMA,I,oDAAAA,IAAgB,SATlB,CACP,IACA,IACA,EACA,IACA,IACA,M","file":"x","sourcesContent":["<div class=\"add-crop\" style=\"overflow-x:hidden;\" fxFlexFill cdkScrollable>\n  <mat-toolbar class=\"add-crop-header mat-elevation-z4 custom-toolbar\" [class.hidden]=\"toggleSearch\">\n    <mat-toolbar-row style=\"padding: 0 5px;\">\n      <button mat-icon-button class=\"toolbar-title\" aria-label=\"Icon-button with close icon\" (click)=\"backToMyCrops()\">\n        <mat-icon>close</mat-icon>\n      </button>\n      <div style=\"padding:8px 0 0 10px; flex:1;\">\n        <div class=\"mat-title toolbar-title\" style=\"margin-bottom:2px;\">Add a crop</div>\n      </div>\n      <button mat-icon-button class=\"toolbar-title\" aria-label=\"Icon-button with search icon\"  (click)=\"openSearch()\">\n        <mat-icon>search</mat-icon>\n      </button>\n    </mat-toolbar-row>\n  </mat-toolbar>\n\n  <mat-toolbar class=\"search-block mat-elevation-z4\" [class.active]=\"toggleSearch\">\n    <mat-toolbar-row style=\"padding: 0 5px;\">\n      <button class=\"search-icon\" mat-icon-button disabled>\n        <mat-icon>search</mat-icon>\n      </button>\n      <input class=\"search-control\" type=\"text\" placeholder=\"Search\" [(ngModel)]=\"searchText\">\n      <button mat-button mat-icon-button (click)=\"searchClose()\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </mat-toolbar-row>\n  </mat-toolbar>\n\n  <mat-grid-list class=\"grid\" cols=\"2\" rowHeight=\"1:1\"    gutterSize=\"2px\"  >\n    <mat-grid-tile *ngFor=\"let crop of filterFunction()\">\n      <mat-card (click)=\"addCrop(crop)\">\n        <img mat-card-image class=\"cardImage\" src=\"{{ crop.url }}\" alt=\"{{ crop.cropName }}\" />\n        <mat-card-footer>\n          <mat-card-title class=\"cardTittle\">{{ crop.cropName }}</mat-card-title>\n        </mat-card-footer>\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SelectCropComponent } from './select-crop.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SelectCropComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SelectCropRoutingModule { }\n","\nimport {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {AppServicesService} from '../app-services.service';\nimport {Router} from '@angular/router';\nimport {formatDate, Location} from '@angular/common';\n\nimport { CropListResponse } from '../models/api/CropListResponse';\nimport { CropInfoResponse } from '../models/api/CropInfoResponse';\nimport { Crop } from '../models/Crop';\n\n@Component({\n  selector: 'app-select-crop',\n  templateUrl: './select-crop.component.html',\n  styleUrls: ['./select-crop.component.scss']\n})\n\nexport class SelectCropComponent implements OnInit{\n\n  searchText = '';\n  title = 'Select Crop';\n\n  @ViewChild('searchbar') searchbar: ElementRef;\n\n  toggleSearch = false;\n  dataSource: Crop[];\n  myCrops: CropListResponse;\n\n  constructor(private appService: AppServicesService, private router: Router, private location: Location) { }\n\n  ngOnInit(): void {\n    this.appService.deleteMyCrops();\n    this.appService.requestCropsList().subscribe(cropListResponse => {\n      this.dataSource = cropListResponse.data;\n    });\n\n    this.appService.getMyCrops().subscribe(cropListResponse => {\n      this.myCrops = cropListResponse;\n    });\n  }\n\n  backToMyCrops(){\n    this.location.back();\n  }\n\n  openSearch() {\n    this.toggleSearch = true;\n    this.searchbar.nativeElement.focus();\n  }\n  searchClose() {\n    this.searchText = '';\n    this.toggleSearch = false;\n  }\n\n  addCrop(clickedCrop: Crop) {\n    if (this.myCrops.data.findIndex(c => c.index === clickedCrop.index) === -1){\n      this.myCrops.data.push(clickedCrop);\n      this.appService.setMyCrops(this.myCrops);\n      this.router.navigateByUrl('/select-growth/' + clickedCrop.index);\n    }\n  }\n\n  filterFunction(): Crop[]{\n    if (this.searchText === null || this.searchText === ''){\n      return this.dataSource;\n    }else{\n      return this.dataSource.filter(i => i.cropName.includes( this.searchText));\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { SelectCropRoutingModule } from './select-crop-routing.module';\nimport { SelectCropComponent } from './select-crop.component';\nimport { MaterialModule } from '../material/material.module';\nimport { FormsModule } from '@angular/forms';\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\n\n\n@NgModule({\n  declarations: [SelectCropComponent],\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    SelectCropRoutingModule,\n    MaterialModule,\n    FormsModule,\n    Ng2SearchPipeModule\n  ]\n})\nexport class SelectCropModule { }\n","import { Injectable, NgModule, Pipe } from '@angular/core';\n\nimport * as ɵngcc0 from '@angular/core';\nclass Ng2SearchPipe {\n    /**\n     * @param {?} items object from array\n     * @param {?} term term's search\n     * @return {?}\n     */\n    transform(items, term) {\n        if (!term || !items)\n            return items;\n        return Ng2SearchPipe.filter(items, term);\n    }\n    /**\n     *\n     * @param {?} items List of items to filter\n     * @param {?} term  a string term to compare with every property of the list\n     *\n     * @return {?}\n     */\n    static filter(items, term) {\n        const /** @type {?} */ toCompare = term.toLowerCase();\n        /**\n         * @param {?} item\n         * @param {?} term\n         * @return {?}\n         */\n        function checkInside(item, term) {\n            for (let /** @type {?} */ property in item) {\n                if (item[property] === null || item[property] == undefined) {\n                    continue;\n                }\n                if (typeof item[property] === 'object') {\n                    if (checkInside(item[property], term)) {\n                        return true;\n                    }\n                }\n                if (item[property].toString().toLowerCase().includes(toCompare)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return items.filter(function (item) {\n            return checkInside(item, term);\n        });\n    }\n}\nNg2SearchPipe.ɵfac = function Ng2SearchPipe_Factory(t) { return new (t || Ng2SearchPipe)(); };\nNg2SearchPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"filter\", type: Ng2SearchPipe, pure: false });\nNg2SearchPipe.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Ng2SearchPipe, factory: Ng2SearchPipe.ɵfac });\n/**\n * @nocollapse\n */\nNg2SearchPipe.ctorParameters = () => [];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2SearchPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'filter',\n                pure: false\n            }]\n    }, {\n        type: Injectable\n    }], null, null); })();\n\nclass Ng2SearchPipeModule {\n}\nNg2SearchPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: Ng2SearchPipeModule });\nNg2SearchPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function Ng2SearchPipeModule_Factory(t) { return new (t || Ng2SearchPipeModule)(); } });\n/**\n * @nocollapse\n */\nNg2SearchPipeModule.ctorParameters = () => [];\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2SearchPipeModule, { declarations: [Ng2SearchPipe], exports: [Ng2SearchPipe] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2SearchPipeModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [Ng2SearchPipe],\n                exports: [Ng2SearchPipe]\n            }]\n    }], null, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Ng2SearchPipeModule, Ng2SearchPipe };\n\n//# sourceMappingURL=ng2-search-filter.js.map"]}